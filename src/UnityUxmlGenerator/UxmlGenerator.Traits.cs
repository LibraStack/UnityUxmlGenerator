using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using UnityUxmlGenerator.Captures;
using UnityUxmlGenerator.Extensions;

namespace UnityUxmlGenerator;

internal sealed partial class UxmlGenerator
{
    private static string GenerateUxmlTraits(GeneratorExecutionContext context, UxmlTraitsCapture capture)
    {
        return $$"""
// <auto-generated/>
#pragma warning disable

#nullable enable

namespace {{capture.ClassNamespace}}
{
    partial class {{capture.ClassName}}
    {
        {{GeneratedCodeAttribute}}
        public new class UxmlTraits : {{GetBaseClassName(context, capture)}}.UxmlTraits
        {
            {{GetUxmlTraitsFields(capture.Properties)}}

            {{GetUxmlTraitsInitialization(capture.ClassName, capture.Properties)}}
        }
    }
}
""";
    }

    private static string GetBaseClassName(GeneratorExecutionContext context, UxmlTraitsCapture capture)
    {
        var baseClassName = capture.GetBaseClassName(out var genericClass);
        var baseClassNamespace = capture.BaseClassType.GetTypeNamespace(context);

        if (genericClass is null)
        {
            return $"global::{baseClassNamespace}.{baseClassName}";
        }

        if (genericClass is PredefinedTypeSyntax predefinedTypeSyntax)
        {
            return $"global::{baseClassNamespace}.{baseClassName}<{predefinedTypeSyntax.Keyword.Text}>";
        }

        if (genericClass is IdentifierNameSyntax customTypeSyntax)
        {
            var genericClassName = customTypeSyntax.Identifier.Text;
            var genericClassNamespace = customTypeSyntax.GetTypeNamespace(context);

            return $"global::{baseClassNamespace}.{baseClassName}<global::{genericClassNamespace}.{genericClassName}>";
        }

        return string.Empty;
    }

    private static string GetUxmlTraitsFields(List<(string, string?)> properties)
    {
        var stringBuilder = new StringBuilder();

        foreach (var (propertyName, uxmlAttributeDefaultValue) in properties)
        {
            var attributeUxmlName = propertyName.ToDashCase();
            var attributeFieldName = propertyName.ToPrivateFieldName();
            var attributeDefaultValue = uxmlAttributeDefaultValue ?? string.Empty;

            stringBuilder.AppendLine($"\t\t\t{GeneratedCodeAttribute}");
            stringBuilder.AppendLine($$"""
            private readonly global::UnityEngine.UIElements.UxmlStringAttributeDescription {{attributeFieldName}} = new() 
                { name = "{{attributeUxmlName}}", defaultValue = "{{attributeDefaultValue}}" };
""");
            stringBuilder.AppendLine();
        }

        return stringBuilder.ToString().Trim();
    }

    private static string GetUxmlTraitsInitialization(string elementClassName,
        List<(string, string?)> properties)
    {
        var stringBuilder = new StringBuilder();

        foreach (var (propertyName, _) in properties)
        {
            var attributeFieldName = propertyName.ToPrivateFieldName();

            stringBuilder.AppendLine(
                $"\t\t\t\tcontrol.{propertyName} = {attributeFieldName}.GetValueFromBag(bag, context);");
        }

        return $$"""
            {{GeneratedCodeAttribute}}
            [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
            public override void Init(global::UnityEngine.UIElements.VisualElement visualElement, 
                global::UnityEngine.UIElements.IUxmlAttributes bag, 
                global::UnityEngine.UIElements.CreationContext context)
            {
                base.Init(visualElement, bag, context);

                var control = ({{elementClassName}}) visualElement;
                {{stringBuilder.ToString().Trim()}}
            }
""".Trim();
    }
}