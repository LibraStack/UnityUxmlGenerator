using System.Text;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using UnityUxmlGenerator.Captures;
using UnityUxmlGenerator.Extensions;

namespace UnityUxmlGenerator;

internal sealed partial class UxmlGenerator
{
    private static string GenerateUxmlTraits(UxmlTraitsCapture uxmlTraits)
    {
        const string uiElementsNamespace = "global::UnityEngine.UIElements.";

        var usingDirectives = uxmlTraits.Class.SyntaxTree
            .GetRoot()
            .DescendantNodes()
            .OfType<UsingDirectiveSyntax>();

        return $$"""
// <auto-generated/>

#nullable enable

{{string.Join(Environment.NewLine, usingDirectives)}}

namespace {{uxmlTraits.Class.GetParent<NamespaceDeclarationSyntax>()!.Name}}
{
    partial class {{uxmlTraits.ClassIdentifier}}
    {
        {{GeneratedCodeAttribute}}
        [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
        public new class UxmlTraits : {{uxmlTraits.BaseClassIdentifier}}.UxmlTraits
        {
            {{GetUxmlTraitsFields(uxmlTraits.Properties, uiElementsNamespace)}}

            {{GetUxmlTraitsInitialization(uxmlTraits.ClassIdentifier, uxmlTraits.Properties, uiElementsNamespace)}}
        }
    }
}
""";
    }

    private static string GetUxmlTraitsFields(List<(string Name, string? DefaultValue)> properties,
        string uiElementsNamespace)
    {
        var stringBuilder = new StringBuilder();

        foreach (var property in properties)
        {
            var propertyName = property.Name!;
            var propertyDefaultValue = property.DefaultValue ?? string.Empty;

            var fieldName = propertyName.ToFieldName();
            var attributeName = propertyName.ToDashCase();

            stringBuilder.AppendLine($"\t\t\t{GeneratedCodeAttribute}");
            stringBuilder.AppendLine($$"""
            private readonly {{uiElementsNamespace}}UxmlStringAttributeDescription {{fieldName}} = new() 
                { name = "{{attributeName}}", defaultValue = "{{propertyDefaultValue}}" };
""");
            stringBuilder.AppendLine();
        }

        return stringBuilder.ToString().Trim();
    }

    private static string GetUxmlTraitsInitialization(string elementClassIdentifier,
        List<(string PropertyName, string? DefaultValue)> properties, string uiElementsNamespace)
    {
        var stringBuilder = new StringBuilder();

        foreach (var property in properties)
        {
            var propertyName = property.PropertyName!;
            var fieldName = propertyName.ToFieldName();

            stringBuilder.AppendLine($"\t\t\t\tcontrol.{propertyName} = {fieldName}.GetValueFromBag(bag, context);");
        }

        return $$"""
            {{GeneratedCodeAttribute}}
            [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
            public override void Init({{uiElementsNamespace}}VisualElement visualElement, 
                {{uiElementsNamespace}}IUxmlAttributes bag, 
                {{uiElementsNamespace}}CreationContext context)
            {
                base.Init(visualElement, bag, context);

                var control = (({{elementClassIdentifier}}) visualElement);
                {{stringBuilder.ToString().Trim()}}
            }
""".Trim();
    }
}